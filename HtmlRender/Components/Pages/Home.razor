@page "/"
@rendermode InteractiveServer

@using HtmlRender.Models
@using HtmlRender.Components
@using HtmlRender.Helpers


@inject ComponentRenderer cr
@inject IJSRuntime JS


<link href="bootstrap/bootstrap.min.css" rel="stylesheet" />

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>


<h3>Employee List</h3>


<h3>Eligible for Testing</h3>




<button class="btn btn-primary p-2 m-5" @onclick="GenerateAPdfAsync">Gnerate PDF</button>





@code {
    private List<EligibleForTesting> eligibleForTesting;

    protected override void OnInitialized()
    {
        // Fetch mock eligible for testing data
        eligibleForTesting = EligibleForTesting.GetEligibleForTestingData();
    }



    // private async Task ShowHtmlInAnotherPageAsync()
    // {
    //     var parameters = new Dictionary<string, object>
    //     {
    //         { "EligibleForTestingList", eligibleForTesting }
    //     };

    //     string htmlString = await cr.RenderComponentToStringAsync<EligibleForTestingTable>(parameters);
    //     await JS.InvokeVoidAsync("openHtmlInNewTab", htmlString);
    // }


    /// <summary>
    /// Handles the button click event on the component
    /// </summary>
    /// <returns></returns>
    private async Task GenerateAPdfAsync()
    {

        var x = new PdfGenerator();
        var y = x.GenerateHelloWorldPdf();

        var base64 = Convert.ToBase64String(y);
        await JS.InvokeVoidAsync("blazorOpenFileInNewTab", base64);


    }

}

